#!/bin/bash
#
jsonFile="/home/ubuntu/vsphere_with_tanzu.json"
#
IFS=$'\n'
#
export KUBECTL_VSPHERE_PASSWORD=${kubectl_password}
#
contents=$(cat /home/ubuntu/.profile | grep -v "/home/ubuntu/bin/kubectl")
echo "${contents}" | tee /home/ubuntu/.profile > /dev/null
contents="alias k=/home/ubuntu/bin/kubectl"
echo "${contents}" | tee -a /home/ubuntu/.profile > /dev/null
#
/home/ubuntu/bin/kubectl-vsphere login --insecure-skip-tls-verify --vsphere-username administrator@${sso_domain_name} --server=https://${api_server_cluster_endpoint}
/home/ubuntu/bin/kubectl config use-context ${namespace_ref}
/home/ubuntu/bin/kubectl apply -f ${remote_path_antrea_create}-${cluster_count}.yml
/home/ubuntu/bin/kubectl apply -f ${remote_path_clusterbootstrap_create}-${cluster_count}.yml
/home/ubuntu/bin/kubectl apply -f ${remote_path}-${cluster_count}.yml
#
# Wait for tkc cluster to be Provisioned
#
retry_tanzu_tkc=61
pause_tanzu_tkc=120
attempt_tanzu_tkc=1
while true ; do
  echo "attempt $attempt_tanzu_tkc to get tkc cluster config_status Provisioned"
  tkc_status=$(/home/ubuntu/bin/kubectl get clusters ${cluster_name} -o json | jq -c -r .status.phase)
  if [[ ${tkc_status} == "Provisioned" ]]; then
    echo "tkc cluster ${cluster_name} is ${tkc_status} after $attempt_tanzu_tkc attempts"
    break 2
  fi
  ((attempt_tanzu_tkc++))
  if [ $attempt_tanzu_tkc -eq $retry_tanzu_tkc ]; then
    echo "Unable to get tkc cluster Provisioned after $attempt_tanzu_tkc"
    exit 255
  fi
  sleep $pause_tanzu_tkc
done