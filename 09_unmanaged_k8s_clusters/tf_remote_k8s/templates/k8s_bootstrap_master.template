#!/bin/bash
run_cmd() {
    retry=10
    pause=60
    attempt=0
    echo "############################################################################################"
    while [ $attempt -ne $retry ]; do
      if eval "$@"; then
        echo "$1 PASSED"
        break
      else
        echo "$1 FAILED"
      fi
      ((attempt++))
      sleep $pause
      if [ $attempt -eq $retry ]; then
        echo "$1 FAILED after $retry retries" | tee /tmp/cloudInitFailed.log
        exit 255
      fi
    done
}
#
run_cmd 'sudo rm -f /tmp/apt-key.gpg; wget https://packages.cloud.google.com/apt/doc/apt-key.gpg -O /tmp/apt-key.gpg; test $(ls -l /tmp/apt-key.gpg | awk '"'"'{print $5}'"'"') -gt 0'
run_cmd 'sudo apt-key add /tmp/apt-key.gpg'
run_cmd 'sudo rm -f /tmp/signing.asc; wget https://baltocdn.com/helm/signing.asc -O /tmp/signing.asc; test $(ls -l /tmp/signing.asc | awk '"'"'{print $5}'"'"') -gt 0'
run_cmd 'sudo apt-key add /tmp/signing.asc'
run_cmd 'sudo rm -f /tmp/gpg; wget https://download.docker.com/linux/ubuntu/gpg -O /tmp/gpg; test $(ls -l /tmp/gpg | awk '"'"'{print $5}'"'"') -gt 0'
run_cmd 'sudo apt-key add /tmp/gpg'
run_cmd '! sudo add-apt-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main" | grep Err:'
run_cmd '! sudo add-apt-repository "deb https://baltocdn.com/helm/stable/debian/ all main" | grep Err:'
run_cmd '! sudo add-apt-repository  "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | grep Err:'
run_cmd 'apt-get install -y docker-ce=${Docker_version}; ls /usr/bin/docker'
run_cmd 'apt-get install -y kubeadm=${K8s_version} kubectl=${K8s_version} kubelet=${K8s_version}; ls /usr/bin/kubeadm /usr/bin/kubectl /usr/bin/kubelet'
run_cmd 'apt-get install -y helm; ls /usr/bin/helm'
run_cmd 'sudo apt-get install -y jq; ls /usr/bin/jq'
#sudo rm /etc/containerd/config.toml
#sudo systemctl restart containerd
sudo  bash -c cat << EOF > /etc/containerd/config.toml
version = 2
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  runtime_type = "io.containerd.runc.v2"
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true
EOF
#
#sudo systemctl restart containerd
sudo systemctl restart containerd docker
sudo usermod -a -G docker ubuntu
sudo kubeadm config images pull
sudo kubeadm init --pod-network-cidr=${K8s_pod_cidr}
mkdir -p /home/ubuntu/.kube
sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config
echo "alias k=kubectl" | sudo tee -a /home/ubuntu/.profile
echo "source <(kubectl completion bash | sed s/kubectl/k/g)" | sudo tee -a /home/ubuntu/.profile
export KUBECONFIG=/etc/kubernetes/admin.conf
#
# docker login if docker_registry_username and docker_registry_password are defined
#
docker_registry_username=${docker_registry_username}
docker_registry_password=${docker_registry_password}
if [[ -z "$docker_registry_username" || -z "$docker_registry_password" ]]; then
echo "docker_registry_username and docker_registry_password are not defined"
else
ping -c 1 foo
while [ $? -ne 0 ] ; do sleep 5 ; docker login --username $docker_registry_username --password $docker_registry_password ; done
fi
#
# Download docker images
#
run_cmd "docker pull tacobayle/busybox-v1; docker image ls | grep tacobayle/busybox-v1"
#
# CNI download images
#
cni=${cni_name}
if [ "$cni" == "antrea" ] ; then
  run_cmd 'wget -O /tmp/antrea.yml.without_nodeportlocal https://github.com/vmware-tanzu/antrea/releases/download/${cni_version}/antrea.yml; test $(ls -l /tmp/antrea.yml.without_nodeportlocal | awk '"'"'{print $5}'"'"') -gt 0'
  cp /tmp/antrea.yml.without_nodeportlocal /tmp/antrea.yml
  sed -i -e "s/    #  NodePortLocal: false/      NodePortLocal: true/g" /tmp/antrea.yml
  run_cmd 'kubectl apply -f /tmp/antrea.yml'
fi
if [ "$cni" == "calico" ] ; then
  docker pull docker.io/calico/node:${cni_version}
  docker pull docker.io/calico/pod2daemon-flexvol:${cni_version}
  docker pull docker.io/calico/typha:${cni_version}
  docker pull docker.io/calico/cni:${cni_version}
  docker pull docker.io/calico/kube-controllers:${cni_version}
  docker pull docker.io/calico/csi:${cni_version}
  docker pull docker.io/calico/apiserver:${cni_version}
  docker pull docker.io/calico/node-driver-registrar:${cni_version}
  kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/${cni_version}/manifests/tigera-operator.yaml
  curl https://raw.githubusercontent.com/projectcalico/calico/${cni_version}/manifests/custom-resources.yaml
  kubectl create -f custom-resources.yaml
fi
#
# K8s generate join command
#
kubeadm token create --print-join-command | tee /home/ubuntu/join-command
sudo chown ubuntu:ubuntu /home/ubuntu/join-command