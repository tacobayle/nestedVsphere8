#cloud-config
users:
  - default

ssh_pwauth: True

chpasswd:
  list: |
    ubuntu:${password}
  expire: False

hostname: ${hostname}

write_files:
  - content: |
      #!/bin/bash
      run_cmd() {
        retry=20
        pause=60
        attempt=0
        echo "############################################################################################"
        while [ $attempt -ne $retry ]; do
          if eval "$@"; then
            echo "$1 PASSED"
            break
          else
            echo "$1 FAILED"
          fi
          ((attempt++))
          sleep $pause
          if [ $attempt -eq $retry ]; then
            echo "$1 FAILED after $retry retries" | tee /tmp/cloudInitFailed.log
            exit 255
          fi
        done
      }
      iface=`ip -o link show | awk -F': ' '{print $2}' | tail -1`
      mac=`ip -o link show | awk -F'link/ether ' '{print $2}' | awk -F' ' '{print $1}' | tail -1`
      hostname=`hostname`
      echo "${ip} $hostname" | sudo tee -a /etc/hosts
      echo "${ip} external-gw" | sudo tee -a /etc/hosts
      echo "${ip_vcenter} ${vcenter_name}.${dns_domain}" | sudo tee -a /etc/hosts
      echo "${ip_vcenter} vcsa" | sudo tee -a /etc/hosts
      cp ${netplanFile} ${netplanFile}.ori
      echo "network:" | sudo tee ${netplanFile}
      echo "    ethernets:" | sudo tee -a ${netplanFile}
      echo "        $iface:" | sudo tee -a ${netplanFile}
      echo "            dhcp4: false" | sudo tee -a ${netplanFile}
      echo "            addresses: [${ipCidr}]" | sudo tee -a ${netplanFile}
      echo "            match:" | sudo tee -a ${netplanFile}
      echo "                macaddress: $mac" | sudo tee -a ${netplanFile}
      echo "            set-name: $iface" | sudo tee -a ${netplanFile}
      echo "            gateway4: ${defaultGw}" | sudo tee -a ${netplanFile}
      echo "            nameservers:" | sudo tee -a ${netplanFile}
      echo "              addresses: [${dns}]" | sudo tee -a ${netplanFile}
      echo "              search: [${dns_domain}]" | sudo tee -a ${netplanFile}
      echo "    version: 2" | sudo tee -a ${netplanFile}
      sudo netplan apply
      run_cmd '! sudo apt update | grep Err'
      #
      # kubectl install
      #
      #run_cmd 'sudo rm -f /tmp/apt-key.gpg; wget https://packages.cloud.google.com/apt/doc/apt-key.gpg -O /tmp/apt-key.gpg; test $(ls -l /tmp/apt-key.gpg | awk '"'"'{print $5}'"'"') -gt 0'
      #run_cmd 'sudo apt-key add /tmp/apt-key.gpg'
      #run_cmd '! sudo add-apt-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main" | grep Err:'
      #run_cmd 'apt-get install -y kubectl=${K8s_version}; ls /usr/bin/kubectl'
      K8s_version="${K8s_version}"
      K8s_version_short=$${K8s_version:0:5}
      K8s_version=$${K8s_version:1}
      run_cmd 'curl -fsSL https://pkgs.k8s.io/core:/stable:/'"$${K8s_version_short}"'/deb/Release.key | sudo gpg --dearmor -o /tmp/kubernetes-apt-keyring.gpg; test $(ls -l /tmp/kubernetes-apt-keyring.gpg | awk '"'"'{print $5}'"'"') -gt 0'
      run_cmd 'echo "deb [signed-by=/tmp/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/'$K8s_version_short'/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list'
      run_cmd 'sudo apt update'
      run_cmd 'apt-get install -y kubectl=$${K8s_version}; ls /usr/bin/kubectl'
      echo "alias k=kubectl" | sudo tee -a /home/ubuntu/.profile
      echo "source <(kubectl completion bash | sed s/kubectl/k/g)" | sudo tee -a /home/ubuntu/.profile
      #
      # helm install
      run_cmd 'sudo rm -f /tmp/signing.asc; wget https://baltocdn.com/helm/signing.asc -O /tmp/signing.asc; test $(ls -l /tmp/signing.asc | awk '"'"'{print $5}'"'"') -gt 0'
      run_cmd 'sudo apt-key add /tmp/signing.asc'
      run_cmd '! sudo add-apt-repository "deb https://baltocdn.com/helm/stable/debian/ all main" | grep Err:'
      run_cmd 'apt-get install -y helm; ls /usr/bin/helm'
      echo "source <(helm completion bash)" | sudo tee -a /home/ubuntu/.profile
      #
      run_cmd 'sudo apt install -y python3-pip; ls /usr/bin/pip3'
      run_cmd 'sudo apt install -y jq; ls /usr/bin/jq'
      run_cmd 'sudo apt install -y unzip; ls /usr/bin/unzip'
      run_cmd 'sudo apt install -y expect; ls /usr/bin/expect'
      run_cmd 'sudo apt install -y python3-jmespath; pip3 list | grep jmespath'
      run_cmd 'sudo apt -y install nfs-kernel-server; ls /usr/share/nfs-kernel-server'
      #
      mkdir -p /nfs/vCDspace
      #
      mkdir -p /home/ubuntu/.kube
      sudo chown ubuntu /home/ubuntu/.kube
      sudo chgrp ubuntu /home/ubuntu/.kube
      #
      mkdir -p /home/ubuntu/avi
      sudo chown ubuntu /home/ubuntu/avi
      sudo chgrp ubuntu /home/ubuntu/avi
      #
      mkdir -p /home/ubuntu/openssl
      sudo chown ubuntu /home/ubuntu/openssl
      sudo chgrp ubuntu /home/ubuntu/openssl
      #
      mkdir -p /home/ubuntu/routes
      sudo chown ubuntu /home/ubuntu/routes
      sudo chgrp ubuntu /home/ubuntu/routes
      #
      mkdir -p /home/ubuntu/vault
      sudo chown ubuntu /home/ubuntu/vault
      sudo chgrp ubuntu /home/ubuntu/vault
      #
      mkdir -p /home/ubuntu/traffic_gen
      sudo chown ubuntu /home/ubuntu/traffic_gen
      sudo chgrp ubuntu /home/ubuntu/traffic_gen
      #
      mkdir -p /home/ubuntu/lbaas
      sudo chown ubuntu /home/ubuntu/lbaas
      sudo chgrp ubuntu /home/ubuntu/lbaas
      #
      mkdir -p /home/ubuntu/${yaml_directory}
      sudo chown ubuntu /home/ubuntu/${yaml_directory}
      sudo chgrp ubuntu /home/ubuntu/${yaml_directory}
      #
      mkdir -p /home/ubuntu/tkgm/workload_clusters
      mkdir -p /home/ubuntu/tkgm/mgmt_cluster
      mkdir -p /home/ubuntu/tkgm/bin
      sudo chown -R ubuntu /home/ubuntu/tkgm
      sudo chgrp -R ubuntu /home/ubuntu/tkgm
      mkdir -p /home/ubuntu/tkc
      sudo chown ubuntu /home/ubuntu/tkc
      sudo chgrp ubuntu /home/ubuntu/tkc
      mkdir -p /home/ubuntu/tanzu
      sudo chown ubuntu /home/ubuntu/tanzu
      sudo chgrp ubuntu /home/ubuntu/tanzu
      #
      mkdir -p /home/ubuntu/unmanaged_k8s_clusters
      sudo chown ubuntu /home/ubuntu/unmanaged_k8s_clusters
      sudo chgrp ubuntu /home/ubuntu/unmanaged_k8s_clusters
      #
      #
      #
      cd /home/ubuntu/${yaml_directory}
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/mixed-protocols-app/mixed-protocols-svc-app.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/sctp_cnf/sctp-cnf.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/sctp_cnf/sctp-client.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/demo-http-apps/demo-http-apps.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/demo-http-apps/demo-http-ingress.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/demo-http-apps/demo-http-crds.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/demo-http-apps/demo-svc-LB-1.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/demo-http-apps/demo-svc-LB-2.yml
      sudo -u ubuntu wget https://raw.githubusercontent.com/tacobayle/k8sYaml/master/demo-http-apps/demo-svc-LB-3.yml
      #
      echo "${nfs_path} ${vcd_ip}(rw,sync,no_subtree_check,no_root_squash)" | sudo tee -a /etc/exports
      sudo systemctl start nfs-kernel-server.service
      sudo exportfs -a
      run_cmd 'pip3 install --upgrade pip'
      run_cmd 'pip3 install ansible==${ansible_version}; ls /usr/local/bin/ansible-playbook'
      run_cmd 'pip3 install avisdk==${avi_sdk_version}; pip3 list | grep avisdk'
      run_cmd 'sudo -u ubuntu ansible-galaxy collection install vmware.alb; sudo -u ubuntu ansible-galaxy collection list | grep vmware.alb'
      run_cmd 'pip3 install dnspython; pip3 list | grep dnspython'
      run_cmd 'pip3 install netaddr; pip3 list | grep netaddr'
      run_cmd 'pip3 install yq==3.2.2; pip3 list | grep yq'
      apt install -y language-pack-en python3-pip python3-jmespath sshpass bind9 bind9utils bind9-doc bind9-host
      #
      # lbaas install
      #
      pip3 install flask
      pip3 install flask_restful
      pip3 install flask_cors
      sudo apt install -y apache2
      sudo mv /var/www/html/index.html /var/www/html/index.html.old
      #
      # vault install and config
      #
      wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
      apt update && apt install vault
      mv /etc/vault.d/vault.hcl /etc/vault.d/vault.hcl.ori
      export VAULT_ADDR="https://127.0.0.1:8200"
      vault_config='
      storage "file" {
        path    = "/opt/vault/data"
      }

      listener "tcp" {
        address     = "0.0.0.0:8200"
        tls_disable = "false"
        tls_cert_file = "/opt/vault/tls/tls.crt"
        tls_key_file = "/opt/vault/tls/tls.key"
      }

      ui = true
      api_addr = "https://${ip}:8200"'
      echo "$${vault_config}" | tee /etc/vault.d/vault.hcl
      systemctl start vault
      systemctl enable vault
      vault operator init -key-shares=1 -key-threshold=1 -tls-skip-verify -format json | tee ${vault_secret_file_path}
      vault operator unseal -tls-skip-verify $(jq -c -r .unseal_keys_hex[0] ${vault_secret_file_path})
      vault login -tls-skip-verify $(jq -c -r .root_token ${vault_secret_file_path})
      # root ca
      vault secrets enable -tls-skip-verify ${vault_pki_name}
      vault secrets tune -tls-skip-verify -max-lease-ttl=${vault_pki_max_lease_ttl} "${vault_pki_name}"
      vault write -tls-skip-verify -field=certificate ${vault_pki_name}/root/generate/internal common_name="${vault_pki_cert_common_name}" issuer_name="${vault_pki_cert_issuer_name}" ttl=${vault_pki_cert_ttl} > ${vault_pki_cert_path}
      #vault list -tls-skip-verify -format json ${vault_pki_name}/issuers/ | tee ${vault_pki_issuers_file}
      vault write -tls-skip-verify ${vault_pki_name}/roles/${vault_pki_role_name} allow_any_name=true
      vault write -tls-skip-verify ${vault_pki_name}/config/urls issuing_certificates="https://${ip}:8200/v1/${vault_pki_role_name}/ca" crl_distribution_points="https://${ip}:8200/v1/${vault_pki_role_name}/crl"
      # intermediate ca
      vault secrets enable -tls-skip-verify -path=${vault_pki_intermediate_name} ${vault_pki_name}
      vault secrets tune -tls-skip-verify -max-lease-ttl=${vault_pki_intermediate_max_lease_ttl} ${vault_pki_intermediate_name}
      vault write -tls-skip-verify -format=json ${vault_pki_intermediate_name}/intermediate/generate/internal common_name="${vault_pki_intermediate_cert_common_name}" issuer_name="${vault_pki_intermediate_cert_issuer_name}" | jq -r '.data.csr' | tee ${vault_pki_intermediate_cert_path}
      vault write -tls-skip-verify -format=json ${vault_pki_name}/root/sign-intermediate issuer_ref="${vault_pki_cert_issuer_name}" csr=@${vault_pki_intermediate_cert_path} format=pem_bundle ttl="${vault_pki_intermediate_max_lease_ttl}" | jq -r '.data.certificate' | tee ${vault_pki_intermediate_cert_path_signed}
      vault write -tls-skip-verify ${vault_pki_intermediate_name}/intermediate/set-signed certificate=@${vault_pki_intermediate_cert_path_signed}
      vault write -tls-skip-verify ${vault_pki_intermediate_name}/roles/${vault_pki_intermediate_role_name} issuer_ref="$(vault read -tls-skip-verify -field=default ${vault_pki_intermediate_role_name}/config/issuers)" allowed_domains="${dns_domain}" allow_subdomains=${vault_pki_intermediate_role_allow_subdomains} max_ttl="${vault_pki_intermediate_role_max_ttl}"
      #
      # install GOVC
      #
      curl -L -o - "https://github.com/vmware/govmomi/releases/latest/download/govc_$(uname -s)_$(uname -m).tar.gz" | tar -C /usr/local/bin -xvzf - govc
      #
      # ssh key generation
      #
      sudo -u ubuntu ssh-keygen -t rsa -N "" -f /home/ubuntu/.ssh/id_rsa
      #
      # terraform install
      #
      sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      sudo apt-get update && sudo apt-get install terraform
      #
      # hosts
      #
      echo ""
      echo "++++++++++++++++++++++++++++++++"
      echo "updating local /etc/hosts with vCenter and esxi0"
      contents=$(cat /etc/hosts | grep -v ${vcsa_nested_ip})
      echo "$${contents}" | sudo tee /etc/hosts
      contents="${vcsa_nested_ip} ${vcenter_name}.${domain}"
      echo "$${contents}" | sudo tee -a /etc/hosts
      #
      # NTP config
      #
      run_cmd 'sudo apt install -y ntp; ls /usr/sbin/ntpd'
      cp /etc/ntp.conf /etc/ntp.conf.old
      rm /etc/ntp.conf
      touch /etc/ntp.conf
      IFS=","
      ntp_servers=${ntp}
      for ntp_server in $ntp_servers
      do
        echo "server $ntp_server iburst" | tee -a /etc/ntp.conf
      done
      run_cmd 'sudo service ntp start; sudo service ntp status | grep running'
      sudo service ntp stop
      sleep 5
      run_cmd 'sudo service ntp start; sudo service ntp status | grep running'
      #
      # Bind config
      #
      sudo cp /etc/bind/named.conf /etc/bind/named.conf.old
      sudo tee /etc/bind/named.conf > /dev/null <<EOT
      include "/etc/bind/named.conf.options";
      include "/etc/bind/named.conf.local";
      include "/etc/bind/named.conf.default-zones";
      key ${keyName}. {
       algorithm hmac-md5;
       secret ${secret};
       };
      EOT
      #
      sudo cp /etc/bind/named.conf.options /etc/bind/named.conf.options.old
      sudo tee /etc/bind/named.conf.options > /dev/null <<EOT
      options {
        directory "/var/cache/bind";
        recursion yes;
        notify yes;
        allow-query { any; };
        allow-query-cache { any; };
        allow-recursion { any; };
        forwarders { ${forwarders}; };
        dnssec-validation no;
        auth-nxdomain no; # conform to RFC1035
        listen-on { localhost; any; };
        listen-on-v6 { localhost; any; };
        allow-transfer { any; };
      };
      EOT
      #
      sudo cp /etc/bind/named.conf.local /etc/bind/named.conf.local.old
      sudo tee /etc/bind/named.conf.local > /dev/null <<EOT
      zone "${domain}" {
        type master;
        forwarders {};
        allow-transfer { any; };
        update-policy {
          grant myKeyName zonesub any;
        };
        file "/var/lib/bind/db.${domain}";
      };
      zone "${reverse}.in-addr.arpa" {
        type master;
        update-policy {
          grant myKeyName zonesub any;
        };
        allow-transfer { any; };
        file "/var/lib/bind/db.${reverse}";
      };
      EOT
      #
      sudo tee /var/lib/bind/db.${domain} > /dev/null <<EOT
      \$ORIGIN .
      \$TTL 60
      ${domain}                IN SOA dns.${domain}. admin.${domain}. (
                                      329        ; serial
                                      604800     ; refresh (1 week)
                                      86400      ; retry (1 day)
                                      2419200    ; expire (4 weeks)
                                      604800     ; minimum (1 week)
                                      )
                              NS      dns.${domain}.
      \$ORIGIN ${domain}.
      dns                     A       ${ip}
      app-dns                 A       ${avi_dns_ip}
      \$TTL 3600       ; 1 hour
      \$ORIGIN ${avi_domain_prefix}.${domain}.
      \$TTL 1D
      \@ IN NS app-dns.${domain}.
      EOT
      #
      sudo tee /var/lib/bind/db.${reverse} > /dev/null <<EOT
      \$ORIGIN .
      \$TTL 60
      ${reverse}.in-addr.arpa     IN SOA  dns.${domain}. admin.${domain}. (
                                      298        ; serial
                                      604800     ; refresh (1 week)
                                      86400      ; retry (1 day)
                                      2419200    ; expire (4 weeks)
                                      604800     ; minimum (1 week)
                                      )
                              NS      dns.${domain}.
      \$ORIGIN ${reverse}.in-addr.arpa.
      ${lastOctet}            PTR     dns.${domain}.
      EOT
      sudo service bind9 restart
      echo "cloud init done" | tee /tmp/cloudInitDone.log
    path: /opt/bootstrap.sh
    permissions: 0755
  - content: |
      ${username} ALL=(ALL) NOPASSWD:ALL
    path: /etc/sudoers.d/${username}

runcmd:
  - /opt/bootstrap.sh